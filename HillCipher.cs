using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Crypto
{
    class HillCipher
    {
        Char[] Alphabets = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 
                           'o','p','q','r','s','t','u','v','w','x','y','z'}; //Character array of alphabets.

        Int32[,] Matrix=new Int32[3,3];
        Int32[,] Inverse = new Int32[3,3];

        Int32[] Msg=new Int32[3];
        Int32[,] Mul = new Int32[3, 3];

        Int32[] Encoded = new Int32[3];

        String Message = "";

        public HillCipher(String Key,String Inverse) {

            AutoGenerateKey(Key);
        }

        /// <summary>
        /// Function to encrypt the given string 
        /// </summary>
        /// <param name="Message">Plain text to encrypt</param>
        /// <returns>Cipher text</returns>
        public String Encrypt(String PlainText) {
            String Temp = "";
            this.Message = PlainText;
            ConvertMsg();
            Multiply();
            SumOfMul();
            foreach (int t in Encoded) {
                Temp+= Alphabets[t];
            }
            return Temp;
        
        }

        public String Decrypt(String CipherText) {
            return null;
        }

        /// <summary>
        /// Convert Char to Index[A-Z];
        /// </summary>
        private void ConvertMsg() {
            for (int i = 0; i < 3; i++) {
                Msg[i] = Array.IndexOf(Alphabets, Message[i]);
            }
        }

        /// <summary>
        /// Multiply the given matrix and message
        /// </summary>
        private void Multiply() {

            for (int i = 0; i < 3; i++) {

                for (int j = 0; j < 3; j++) {

                    Mul[i, j] = Matrix[i, j] * Msg[j];
                }
            }
        }

        /// <summary>
        /// Function performs the addition of finaly, matrix. 
        /// </summary>
        /// The matrix is generated by Multiply function, and it's will be used here. 
        private void SumOfMul() {
            int Iter = 0;
            for (int i = 0; i < 3; i++)
            {

                for (int j = 0; j < 3; j++)
                {
                    Encoded[Iter] += Mul[i, j];
                }
                Encoded[Iter] = Encoded[Iter] % 26;
                Iter++;
            }
             
        }

        /// <summary>
        /// Generates the key automatically.
        /// </summary>
        /// <param name="Key"></param>
        private void AutoGenerateKey(String Key) 
        {
            int Iter=0;
            for (int i = 0; i < 3; i++) 
            {
                for (int j = 0; j < 3; j++) 
                {
                    Matrix[i, j] = Array.IndexOf(Alphabets,Key[Iter]);
                    Iter++;
                }
            }

            // Generating Inverse_Matrix.
            Int32[] Inv = { 8, 5, 10, 21, 8, 21, 21, 12, 8 };
            Iter = 0;
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Inverse[i, j] = Inv[Iter];
                    Iter++;
                }
            }
        }

        public void Display() {
            
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Console.Write(Mul[i, j] + " "); 
                    
                }
                Console.WriteLine();
            }
        }
        
    }
}
